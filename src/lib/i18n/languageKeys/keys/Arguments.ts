import { FT, T } from '#lib/types';

export const RangeInvalid = FT<{ value: string }, string>('arguments/range:invalid');
export const RangeMax = FT<{ value: string; maximum: number; count: number }, string>('arguments/range:max');
export const ImageNotFound = FT<{ value: string }, string>('arguments/image:notFound');

export const Boolean = FT<{ parameter: string; possibles: string[]; count: number }, string>('arguments:boolean');
export const CategoryChannel = FT<{ parameter: string }, string>('arguments:categoryChannel');
export const Channel = FT<{ parameter: string }, string>('arguments:channel');
export const Date = FT<{ parameter: string }, string>('arguments:date');
export const DateTooSmall = FT<{ parameter: string; minimum: number }, string>('arguments:dateTooSmall');
export const DateTooBig = FT<{ parameter: string; maximum: number }, string>('arguments:dateTooBig');
export const DMChannel = FT<{ parameter: string }, string>('arguments:dmChannel');
export const Float = FT<{ parameter: string }, string>('arguments:float');
export const FloatTooSmall = FT<{ parameter: string; minimum: number }, string>('arguments:floatTooSmall');
export const FloatTooBig = FT<{ parameter: string; maximum: number }, string>('arguments:floatTooBig');
export const GuildChannel = FT<{ parameter: string }, string>('arguments:guildChannel');
export const GuildChannelMissingGuild = FT<{ parameter: string }, string>('arguments:guildChannelMissingGuild');
export const Hyperlink = FT<{ parameter: string }, string>('arguments:hyperlink');
export const Integer = FT<{ parameter: string }, string>('arguments:integer');
export const IntegerTooSmall = FT<{ parameter: string; minimum: number }, string>('arguments:integerTooSmall');
export const IntegerTooBig = FT<{ parameter: string; maximum: number }, string>('arguments:integerTooBig');
export const Member = FT<{ parameter: string }, string>('arguments:member');
export const MemberMissingGuild = FT<{ parameter: string }, string>('arguments:memberMissingGuild');
export const Message = FT<{ parameter: string }, string>('arguments:message');
export const NewsChannel = FT<{ parameter: string }, string>('arguments:newsChannel');
export const Number = FT<{ parameter: string }, string>('arguments:number');
export const NumberTooSmall = FT<{ parameter: string; minimum: number }, string>('arguments:numberTooSmall');
export const NumberTooBig = FT<{ parameter: string; maximum: number }, string>('arguments:numberTooBig');
export const Role = FT<{ parameter: string }, string>('arguments:role');
export const RoleMissingGuild = FT<{ parameter: string }, string>('arguments:roleMissingGuild');
export const StringTooShort = FT<{ parameter: string; minimum: number }, string>('arguments:stringTooShort');
export const StringTooLong = FT<{ parameter: string; maximum: number }, string>('arguments:stringTooLong');
export const TextChannel = FT<{ parameter: string }, string>('arguments:textChannel');
export const User = FT<{ parameter: string }, string>('arguments:user');
export const VoiceChannel = FT<{ parameter: string }, string>('arguments:voiceChannel');

export const BoolDisabled = T<string>('arguments:booleanDisabled');
export const BoolEnabled = T<string>('arguments:booleanEnabled');
export const BoolFalseOptions = T<readonly string[]>('arguments:booleanFalseOptions');
export const BoolTrueOptions = T<readonly string[]>('arguments:booleanTrueOptions');
export const Command = FT<{ parameter: string }, string>('arguments:command');
export const Duration = FT<{ parameter: string }, string>('arguments:duration');
export const Emoji = FT<{ parameter: string }, string>('arguments:emoji');
export const Guild = FT<{ parameter: string }, string>('arguments:guild');
export const Invite = FT<{ parameter: string }, string>('arguments:invite');
export const Language = FT<{ parameter: string; possibles: readonly string[] }, string>('arguments:language');
export const Piece = FT<{ parameter: string; piece: string }, string>('arguments:piece');
export const Snowflake = FT<{ parameter: string }, string>('arguments:snowflake');
export const Store = FT<{ parameter: string }, string>('arguments:store');
export const Time = FT<{ parameter: string }, string>('arguments:time');
export const Wager = FT<{ parameter: number; possibles: readonly string[] }, string>('arguments:wager');
